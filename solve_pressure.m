% calculate the pressure field
function[center] = solve_pressure(domain, param, fluid, face, ...
    center)
    % initialize variables
	[temp1, temp2] = deal(zeros(domain.nx+2, domain.ny+2));
    % calculate source term and the coefficient for pressure
    rho_temp = fluid.rho;
    large_num = 1000;
    rho_temp(1:domain.nx+2,1) = large_num;
    rho_temp(1:domain.nx+2,domain.ny+2) = large_num;
    rho_temp(1,1:domain.ny+2) = large_num;
    rho_temp(domain.nx+2,1:domain.ny+2) = large_num;
    for i=2:domain.nx+1
        for j=2:domain.ny+1
            temp1(i,j) = (0.5/param.dt)* ...
                ((face.u_temp(i,j)-face.u_temp(i-1,j  ))/domain.dx+ ...
                 (face.v_temp(i,j)-face.v_temp(i  ,j-1))/domain.dy);
            temp2(i,j) = 1.0/((1./domain.dx)* ...
                (1./(domain.dx*(rho_temp(i+1,j  )+rho_temp(i,j)))+...
                 1./(domain.dx*(rho_temp(i-1,j  )+rho_temp(i,j))))+ ...
                (1./domain.dy)* ...
                (1./(domain.dy*(rho_temp(i  ,j+1)+rho_temp(i,j)))+...
                 1./(domain.dy*(rho_temp(i  ,j-1)+rho_temp(i,j)))));
        end
    end
    
    % solve the pressure
    for it=1:param.max_iter
        old_pres = center.pres;
        for i=2:domain.nx+1
            for j=2:domain.ny+1
                center.pres(i,j) = (1.0-param.beta)*center.pres(i,j)+ ...
                    param.beta*temp2(i,j)*((1./domain.dx)* ...
                    (center.pres(i+1,j)/(domain.dx*(rho_temp(i+1,j)+ ...
                     rho_temp(i,j)))+ ...
                     center.pres(i-1,j)/(domain.dx*(rho_temp(i-1,j)+ ...
                     rho_temp(i,j))))+ ...
                    (1./domain.dy)* ...
                    (center.pres(i,j+1)/(domain.dy*(rho_temp(i,j+1)+ ...
                     rho_temp(i,j)))+...
                     center.pres(i,j-1)/(domain.dy*(rho_temp(i,j-1)+ ...
                     rho_temp(i,j))))-temp1(i,j));
            end
        end
        if max(max(abs(old_pres-center.pres))) < param.max_err
            break
        end
    end
end